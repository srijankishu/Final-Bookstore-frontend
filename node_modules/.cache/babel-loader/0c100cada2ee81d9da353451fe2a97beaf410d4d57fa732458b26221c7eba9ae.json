{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srijan\\\\Desktop\\\\project - test - Copy\\\\Frontend\\\\bookstore\\\\src\\\\Context\\\\ProtectedRoute.jsx\";\nimport React from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Correct import for jwt-decode\nimport Login from '../Component/Login'; // Your Login component\nimport { Signup } from '../Component/Signup';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 6\n    }, this);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n  try {\n    const decodedToken = jwtDecode(token);\n\n    // Check if the user has the 'admin' role\n    if (decodedToken.role !== 'admin') {\n      alert('Access Denied: Admins Only');\n      return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this); // Redirect to Login if the user is not an admin\n    }\n\n    // Render the children if the token is valid and the user is an admin\n    return children;\n  } catch (err) {\n    console.error('Invalid token', err);\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this); // Render Login if the token is invalid\n  }\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","jwtDecode","Login","Signup","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","token","localStorage","getItem","fileName","_jsxFileName","lineNumber","columnNumber","decodedToken","role","alert","err","console","error","removeItem","_c","$RefreshReg$"],"sources":["C:/Users/Srijan/Desktop/project - test - Copy/Frontend/bookstore/src/Context/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport {jwtDecode} from 'jwt-decode';  // Correct import for jwt-decode\r\nimport Login from '../Component/Login'; // Your Login component\r\nimport { Signup } from '../Component/Signup';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  if (!token) {\r\n     <h1>Error</h1>\r\n    return <></>;\r\n  }\r\n\r\n  try {\r\n    const decodedToken = jwtDecode(token);\r\n\r\n    // Check if the user has the 'admin' role\r\n    if (decodedToken.role !== 'admin') {\r\n      alert('Access Denied: Admins Only');\r\n      return <Login />; // Redirect to Login if the user is not an admin\r\n    }\r\n\r\n    // Render the children if the token is valid and the user is an admin\r\n    return children;\r\n\r\n  } catch (err) {\r\n    console.error('Invalid token', err);\r\n    localStorage.removeItem('token');\r\n    return <Login />; // Render Login if the token is invalid\r\n  }\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,SAAS,QAAO,YAAY,CAAC,CAAE;AACvC,OAAOC,KAAK,MAAM,oBAAoB,CAAC,CAAC;AACxC,SAASC,MAAM,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACT,aAAAL,OAAA;MAAAI,QAAA,EAAI;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;IACf,oBAAOX,OAAA,CAAAE,SAAA,mBAAI,CAAC;EACd;EAEA,IAAI;IACF,MAAMU,YAAY,GAAGhB,SAAS,CAACS,KAAK,CAAC;;IAErC;IACA,IAAIO,YAAY,CAACC,IAAI,KAAK,OAAO,EAAE;MACjCC,KAAK,CAAC,4BAA4B,CAAC;MACnC,oBAAOd,OAAA,CAACH,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC,CAAC;IACpB;;IAEA;IACA,OAAOP,QAAQ;EAEjB,CAAC,CAAC,OAAOW,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;IACnCT,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOlB,OAAA,CAACH,KAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACpB;AACF,CAAC;AAACQ,EAAA,GAzBIhB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
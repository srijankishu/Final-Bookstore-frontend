{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srijan\\\\Desktop\\\\project - test - Copy\\\\Frontend\\\\bookstore\\\\src\\\\Component\\\\PurchasedBooks.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { pdfjs } from 'react-pdf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = new URL('pdfjs-dist/build/pdf.worker.min.mjs', import.meta.url).toString();\nconst PurchasedBooks = ({\n  item\n}) => {\n  // const [pdfName, setPdfName] = useState(null); // Store the PDF for this card\n  // const [allImage, setAllImage] = useState([]); // Store all PDFs from backend\n  // const navigate = useNavigate();\n\n  // useEffect(() => {\n  //     const getPdf = async () => {\n  //         try {\n  //             const result = await axios.get(\"http://localhost:4001/get-files\");\n  //             setAllImage(result.data.data); // Assuming the response contains an array of PDFs\n  //         } catch (error) {\n  //             console.error(\"Error fetching PDFs:\", error.response ? error.response.data : error.message);\n  //         }\n  //     };\n\n  //     getPdf();\n  // }, []);\n\n  // useEffect(() => {\n  //     // Find the assigned PDF for the current card (item)\n  //     const associatedPdf = allImage.find((pdf) => pdf.id === item.id); // Assuming both item and PDF have an `id` field\n  //     if (associatedPdf) {\n  //         setPdfName(associatedPdf.pdf); // Set the PDF name for the card\n  //     }\n  // }, [allImage, item.id]); // Re-run this whenever the list of PDFs or the item ID changes\n\n  // const showPdf = () => {\n  //     if (pdfName) {\n  //         navigate(`/pdf/${encodeURIComponent(pdfName)}`); // Navigate to the PDF view page\n  //     } else {\n  //         console.error(\"No PDF available for this item.\");\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card bg-base-100 w-90 m-2 shadow-xl hover:scale-105 duration-200 bg-white text-black dark:bg-slate-900 dark:text-white dark:border\",\n      children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.image,\n          alt: \"Book Cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"card-title\",\n          children: [item.name, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"badge badge-secondary\",\n            children: item.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Genre: \", item.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Author: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"italic\",\n            children: item.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-actions justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"rounded p-2 bg-slate-500 text-white\",\n            children: \"Read Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_c = PurchasedBooks;\nexport default PurchasedBooks;\nvar _c;\n$RefreshReg$(_c, \"PurchasedBooks\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","URL","import","meta","url","toString","PurchasedBooks","item","className","children","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","category","title","author","_c","$RefreshReg$"],"sources":["C:/Users/Srijan/Desktop/project - test - Copy/Frontend/bookstore/src/Component/PurchasedBooks.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { pdfjs } from 'react-pdf';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\r\n    'pdfjs-dist/build/pdf.worker.min.mjs',\r\n    import.meta.url,\r\n).toString();\r\n\r\nconst PurchasedBooks = ({ item }) => {\r\n    // const [pdfName, setPdfName] = useState(null); // Store the PDF for this card\r\n    // const [allImage, setAllImage] = useState([]); // Store all PDFs from backend\r\n    // const navigate = useNavigate();\r\n\r\n    // useEffect(() => {\r\n    //     const getPdf = async () => {\r\n    //         try {\r\n    //             const result = await axios.get(\"http://localhost:4001/get-files\");\r\n    //             setAllImage(result.data.data); // Assuming the response contains an array of PDFs\r\n    //         } catch (error) {\r\n    //             console.error(\"Error fetching PDFs:\", error.response ? error.response.data : error.message);\r\n    //         }\r\n    //     };\r\n\r\n    //     getPdf();\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     // Find the assigned PDF for the current card (item)\r\n    //     const associatedPdf = allImage.find((pdf) => pdf.id === item.id); // Assuming both item and PDF have an `id` field\r\n    //     if (associatedPdf) {\r\n    //         setPdfName(associatedPdf.pdf); // Set the PDF name for the card\r\n    //     }\r\n    // }, [allImage, item.id]); // Re-run this whenever the list of PDFs or the item ID changes\r\n\r\n    // const showPdf = () => {\r\n    //     if (pdfName) {\r\n    //         navigate(`/pdf/${encodeURIComponent(pdfName)}`); // Navigate to the PDF view page\r\n    //     } else {\r\n    //         console.error(\"No PDF available for this item.\");\r\n    //     }\r\n    // };\r\n\r\n\r\n    return (\r\n        <div className='mt-4'>\r\n            <div className=\"card bg-base-100 w-90 m-2 shadow-xl hover:scale-105 duration-200 bg-white text-black dark:bg-slate-900 dark:text-white dark:border\">\r\n                <figure>\r\n                    <img src={item.image} alt=\"Book Cover\" />\r\n                </figure>\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title\">\r\n                        {item.name}\r\n                        <div className=\"badge badge-secondary\">{item.category}</div>\r\n\r\n                    </h2>\r\n                    <p>Genre: {item.title}</p>\r\n                    <p> Author: <span className=\"italic\">{item.author}</span> </p>\r\n                    <div className=\"card-actions justify-between\">\r\n                        {/* {item.price === 0 ? null : <div className=\"cursor-pointer px-7 py-1 rounded-full border-[2px] hover:bg-pink-500 hover:text-white duration-300 badge-outline\">\r\n                            ${item.price}\r\n                        </div>\r\n                        } */}\r\n                        <button className='rounded p-2 bg-slate-500 text-white'>Read Book</button>\r\n                        {/* yaha pr hm ek showPDF() call krenge baad me */}\r\n                        <div>\r\n\r\n                            {/* READ BUTTON HERE */}\r\n                            \r\n\r\n                            {/* {pdfName ? (\r\n                                item.price === 0 ? (\r\n                                    <div className=\"flex justify-center w-full\">\r\n                                        <button className=\"cursor-pointer px-4 py-1 rounded-full border-[2px] hover:bg-pink-500 hover:text-white duration-300 badge-outline\" onClick={showPdf}>Read</button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div\r\n                                        className=\"cursor-pointer px-4 py-1 rounded-full border-[2px] hover:bg-pink-500 hover:text-white duration-300 badge-outline\"\r\n                                        onClick={showPdf}\r\n                                    >\r\n                                        Read\r\n                                    </div>\r\n                                )\r\n                            ) : (\r\n                                <p>No PDF available</p>\r\n                            )} */}\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PurchasedBooks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}